function e(e,t,n,i){Object.defineProperty(e,t,{get:n,set:i,enumerable:!0,configurable:!0})}var t="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},n={},i={},s=t.parcelRequiref27a;function o(){class e extends HTMLElement{shadow=this.attachShadow({mode:"open"});constructor(){super(),this.render()}render(){let e=document.createElement("style");e.textContent="\n         .header{\n            background-color:#FF8282;\n            height:55px;\n         }\n         ",this.shadow.innerHTML='\n         <header class="header"></header>\n         ',this.shadow.appendChild(e)}}customElements.define("header-component",e)}null==s&&((s=function(e){if(e in n)return n[e].exports;if(e in i){var t=i[e];delete i[e];var s={id:e,exports:{}};return n[e]=s,t.call(s.exports,s,s.exports),s.exports}var o=new Error("Cannot find module '"+e+"'");throw o.code="MODULE_NOT_FOUND",o}).register=function(e,t){i[e]=t},t.parcelRequiref27a=s),s.register("27Lyk",(function(t,n){var i,s;e(t.exports,"register",(()=>i),(e=>i=e)),e(t.exports,"resolve",(()=>s),(e=>s=e));var o={};i=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)o[t[n]]=e[t[n]]},s=function(e){var t=o[e];if(null==t)throw new Error("Could not resolve bundle with id "+e);return t}})),s.register("8gjmh",(function(e,t){e.exports=new URL(s("27Lyk").resolve("darqx"),import.meta.url).toString()})),s("27Lyk").register(JSON.parse('{"dZpbI":"index.424c4166.js","darqx":"delete.58c1b22f.png"}'));const d={data:{tasks:[{id:1,title:"Item Example",completed:!1},{id:4,title:"Thirty item",deleted:!0}]},listeners:[],init(){const e=localStorage.getItem("saved-state");this.setState(JSON.parse(e))},getState(){return this.data},getEnabledTasks(){
//!t.deleted = si no tiene deleted false pasa el filtro, pero si tiene !deleted true no pasa.
return this.getState().tasks.filter((e=>!e.deleted))},setState(e){this.data=e;for(const t of this.listeners)t(e);console.log("soy el state, i change",this.data),localStorage.setItem("saved-state",JSON.stringify(e))},subscribe(e){this.listeners.push(e)},addTask(e,t){const n=d.getState();n.tasks.push({id:e,title:t,completed:!1}),this.setState(n)},changeCompletedState(e,t){const n=d.getState();n.tasks.find((t=>t.id==e)).completed=t,this.setState(n)},deleteTasks(e){const t=this.getState();t.tasks=t.tasks.filter((t=>t.id!==e)),this.setState(t)}};function r(){class e extends HTMLElement{shadow=this.attachShadow({mode:"open"});constructor(){super()}connectedCallback(){this.title=this.getAttribute("title")||"",this.checked=this.hasAttribute("checked"),this.id=this.getAttribute("id"),this.render()}addListenerCheck(){this.shadow.querySelector(".checkbox-input")?.addEventListener("click",(e=>{const t=e.target,n=new CustomEvent("change",{detail:{id:this.id,value:t.checked}});this.dispatchEvent(n)}))}render(){console.log("render");const e=s("8gjmh"),t=document.createElement("style");t.textContent="\n         .card{\n            margin: 0 30px 20px 30px;\n            padding:22px 13px;\n            background-color:#FFF599;\n            width:312px;\n            height:110px;\n            display: flex;\n            justify-content: space-between;\n         }\n         .titulo.checked{\n            text-decoration: line-through;\n         }\n         .checkbox-input{\n            width: 43px;\n            height: 22px;\n         }\n         .content-input{\n            position: relative;\n            top: 20px;\n         }\n         .img-trash{\n            position: relative;\n            top: -60px;\n            right: -130px;\n         }\n         .trash{\n            cursor:pointer;\n            \n         }\n         .border-color{\n            border:3px solid;\n\n         }\n         \n         ",this.shadow.innerHTML=`\n         <div class="card">\n            <h3 class="titulo ${this.checked?"checked":""}">${this.title}</h3>\n         <div class="content-input">\n            <input class="checkbox-input" type="checkbox" ${this.checked?"checked":""}/>\n         </div>\n         \n         \n         </div>\n         ${this.checked?`<div class="img-trash">\n         <img id="trashId" class="trash" src="${e}">\n         \n      </div>`:""}\n         `;const n=this.shadow.querySelector(".card");1==this.checked&&n.classList.add("border-color");this.shadow.querySelector(".trash")?.addEventListener("click",(()=>{const e=d.getState().tasks;for(const t of e)!0===t.completed&&d.deleteTasks(t.id)})),this.shadow.appendChild(t),this.addListenerCheck()}}customElements.define("todo-card",e)}function a(e){const t=document.createElement("div"),n=d.getEnabledTasks();t.innerHTML='\n      <header-component></header-component>\n      <div class="content-h1">\n         <h1 class="title-h1">Mis Pendientes</h1>\n      </div>\n      <form class="content">\n         <input class="input"/>\n         <button class="addButon">Agregar</button>\n      </form>\n      \n      <ul class="list"></ul>\n      ';const i=t.querySelector(".list");function s(e){i.innerHTML="";for(const t of e){const e=document.createElement("todo-card");e.classList.add("container-todo"),e.setAttribute("title",t.title),e.setAttribute("id",t.id),t.completed&&e.setAttribute("checked","true"),e.addEventListener("change",(e=>{d.changeCompletedState(e.detail.id,e.detail.value)})),i.appendChild(e)}}d.subscribe((()=>{s(d.getEnabledTasks())})),s(n);const o=document.createElement("style");o.textContent="\n   .container-todo{\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      align-items: center;\n   }\n   .title-h1{\n      width:271px;\n      font-size:52px;\n      margin:41px 74px 25px 30px;\n   }\n   @media (min-width:759px){\n      .title-h1{\n      width:auto;\n      }\n      .list{\n         display: grid;\n         grid-template-columns: 393px 387px;\n         justify-content: center;\n      }\n   }\n   .content{\n      display:flex;\n      flex-direction:column;\n      justify-content: center;\n      align-items: center;\n   }\n   @media (min-width:759px){\n      .content{\n      flex-direction:row;\n\n      }\n   }\n   .content-h1{\n      display: flex;\n      justify-content: center;\n      align-items: center;\n   }\n   .input{\n      width:300px;\n      height:42px;\n      margin: 0 32px 15px\n   }\n   .addButon{\n      width:300px;\n      height:42px;\n      background-color: #9CBBE9;\n      font-size:22px;\n      color:black;\n      border-style:none;\n      margin-bottom: 40px;\n   }\n   @media (min-width:759px){\n      .addButon{\n         width: 240px;\n         margin-bottom: 16px;\n      }\n      .input{\n         width: 450px;\n         border:2px solid;\n      }\n   }\n   @media (min-width:1167px){\n      .list{\n         grid-template-columns: 393px 361px 391px;\n         justify-content: center;\n      }\n   }\n   ";t.querySelector(".content")?.addEventListener("submit",(e=>{e.preventDefault();const n=t.querySelector(".input"),i=n.value;if(""===i)return alert("No se puede agregar un campo vacio"),!1;d.addTask(Math.random(),i),n.value=""})),e.appendChild(t),e.appendChild(o)}!function(){d.init(),o(),r();a(document.querySelector(".root"))}();
//# sourceMappingURL=index.424c4166.js.map
